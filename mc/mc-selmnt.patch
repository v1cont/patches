diff -urNp mc-4.8.27-orig/lib/keybind.c mc-4.8.27/lib/keybind.c
--- mc-4.8.27-orig/lib/keybind.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/lib/keybind.c	2021-12-21 13:46:21.728523342 +0200
@@ -172,6 +172,8 @@ static name_keymap_t command_names[] = {
     ADD_KEYMAP_NAME (LinkSymbolicEdit),
     ADD_KEYMAP_NAME (ExternalPanelize),
     ADD_KEYMAP_NAME (Filter),
+    ADD_KEYMAP_NAME (SelectMntLeft),
+    ADD_KEYMAP_NAME (SelectMntRight),
 #ifdef ENABLE_VFS_FISH
     ADD_KEYMAP_NAME (ConnectFish),
 #endif
diff -urNp mc-4.8.27-orig/lib/keybind.h mc-4.8.27/lib/keybind.h
--- mc-4.8.27-orig/lib/keybind.h	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/lib/keybind.h	2021-12-21 13:46:21.728523342 +0200
@@ -154,6 +154,8 @@ enum
     CK_LinkSymbolicEdit,
     CK_ExternalPanelize,
     CK_Filter,
+    CK_SelectMntLeft,
+    CK_SelectMntRight,
     CK_ConnectFish,
     CK_ConnectFtp,
     CK_ConnectSftp,
diff -urNp mc-4.8.27-orig/po/ru.po mc-4.8.27/po/ru.po
--- mc-4.8.27-orig/po/ru.po	2021-08-15 17:03:25.000000000 +0300
+++ mc-4.8.27/po/ru.po	2021-12-21 13:46:21.728523342 +0200
@@ -4653,6 +4653,10 @@ msgstr "Поиск"
 msgid "ButtonBar|UnWrap"
 msgstr "Разверн"
 
+#: messages for selmnt patch
+msgid "&Mountpoints"
+msgstr "&Точки монтирования"
+
 msgid "ButtonBar|Wrap"
 msgstr "Сверн"
 
diff -urNp mc-4.8.27-orig/po/uk.po mc-4.8.27/po/uk.po
--- mc-4.8.27-orig/po/uk.po	2021-08-15 17:03:25.000000000 +0300
+++ mc-4.8.27/po/uk.po	2021-12-21 13:46:21.729523330 +0200
@@ -4721,3 +4721,7 @@ msgstr "Почати спочатку?"
 
 msgid "Cannot fetch a local copy of /ftp://some.host/editme.txt"
 msgstr "Не вдалося отримати локальну копію /ftp://some.host/editme.txt"
+
+#: messages for selmnt patch
+msgid "&Mountpoints"
+msgstr "&Точки монтування"
diff -urNp mc-4.8.27-orig/src/filemanager/cmd.c mc-4.8.27/src/filemanager/cmd.c
--- mc-4.8.27-orig/src/filemanager/cmd.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/cmd.c	2021-12-21 13:46:21.729523330 +0200
@@ -510,7 +510,7 @@ configure_panel_listing (WPanel * p, int
 
 /* --------------------------------------------------------------------------------------------- */
 
-static void
+void
 switch_to_listing (int panel_index)
 {
     if (get_panel_type (panel_index) != view_listing)
diff -urNp mc-4.8.27-orig/src/filemanager/cmd.h mc-4.8.27/src/filemanager/cmd.h
--- mc-4.8.27-orig/src/filemanager/cmd.h	2021-01-10 13:50:16.000000000 +0200
+++ mc-4.8.27/src/filemanager/cmd.h	2021-12-21 13:46:21.729523330 +0200
@@ -106,6 +106,7 @@ const char *chattr_get_as_str (unsigned
 #endif
 /* find.c */
 void find_cmd (WPanel * panel);
+void switch_to_listing (int panel_index);
 
 /*** inline functions ****************************************************************************/
 #endif /* MC__CMD_H */
diff -urNp mc-4.8.27-orig/src/filemanager/filemanager.c mc-4.8.27/src/filemanager/filemanager.c
--- mc-4.8.27-orig/src/filemanager/filemanager.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/filemanager.c	2021-12-21 13:46:21.729523330 +0200
@@ -87,6 +87,7 @@
 #include "src/file_history.h"   /* show_file_history() */
 
 #include "filemanager.h"
+#include "selmnt.h"
 
 /*** global variables ****************************************************************************/
 
@@ -187,7 +188,7 @@ listmode_cmd (void)
 /* --------------------------------------------------------------------------------------------- */
 
 static GList *
-create_panel_menu (void)
+create_panel_menu (gboolean is_left)
 {
     GList *entries = NULL;
 
@@ -219,6 +220,8 @@ create_panel_menu (void)
 #endif
     entries = g_list_prepend (entries, menu_entry_create (_("Paneli&ze"), CK_Panelize));
     entries = g_list_prepend (entries, menu_separator_create ());
+    entries = g_list_prepend (entries, menu_entry_create (_("&Mountpoints"), 
+        is_left ? CK_SelectMntLeft : CK_SelectMntRight));
     entries = g_list_prepend (entries, menu_entry_create (_("&Rescan"), CK_Reread));
 
     return g_list_reverse (entries);
@@ -356,14 +359,14 @@ create_options_menu (void)
 static void
 init_menu (void)
 {
-    left_menu = create_menu ("", create_panel_menu (), "[Left and Right Menus]");
+    left_menu = create_menu ("", create_panel_menu (TRUE), "[Left and Right Menus]");
     menubar_add_menu (the_menubar, left_menu);
     menubar_add_menu (the_menubar, create_menu (_("&File"), create_file_menu (), "[File Menu]"));
     menubar_add_menu (the_menubar,
                       create_menu (_("&Command"), create_command_menu (), "[Command Menu]"));
     menubar_add_menu (the_menubar,
                       create_menu (_("&Options"), create_options_menu (), "[Options Menu]"));
-    right_menu = create_menu ("", create_panel_menu (), "[Left and Right Menus]");
+    right_menu = create_menu ("", create_panel_menu (FALSE), "[Left and Right Menus]");
     menubar_add_menu (the_menubar, right_menu);
     update_menu ();
 }
@@ -1432,6 +1435,12 @@ midnight_execute_cmd (Widget * sender, l
     case CK_Cancel:
         /* don't close panels due to SIGINT */
         break;
+    case CK_SelectMntLeft:
+        select_mnt_left ();
+        break;
+    case CK_SelectMntRight:
+        select_mnt_right ();
+        break;
     default:
         res = MSG_NOT_HANDLED;
     }
@@ -1545,6 +1554,13 @@ midnight_callback (Widget * w, Widget *
         if (widget_get_state (WIDGET (the_menubar), WST_FOCUSED))
             return MSG_NOT_HANDLED;
 
+        if (parm == KEY_F (11) || parm == KEY_F (12))
+        {
+            command = keybind_lookup_keymap_command (w->keymap, parm);
+            if (command != CK_IgnoreKey)
+                return midnight_execute_cmd (NULL, command);
+        }
+
         if (parm == '\n' && !is_cmdline_mute ())
         {
             if (handle_cmdline_enter ())
diff -urNp mc-4.8.27-orig/src/filemanager/hotlist.c mc-4.8.27/src/filemanager/hotlist.c
--- mc-4.8.27-orig/src/filemanager/hotlist.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/hotlist.c	2021-12-21 13:46:21.729523330 +0200
@@ -205,7 +205,7 @@ static struct hotlist *current_group;
 
 static GString *tkn_buf = NULL;
 
-static char *hotlist_file_name;
+//static char *hotlist_file_name;
 static FILE *hotlist_file;
 static time_t hotlist_file_mtime;
 
diff -urNp mc-4.8.27-orig/src/filemanager/hotlist.h mc-4.8.27/src/filemanager/hotlist.h
--- mc-4.8.27-orig/src/filemanager/hotlist.h	2021-01-10 13:50:16.000000000 +0200
+++ mc-4.8.27/src/filemanager/hotlist.h	2021-12-21 13:46:21.729523330 +0200
@@ -21,6 +21,7 @@ typedef enum
 /*** structures declarations (and typedefs of structures)*****************************************/
 
 /*** global variables defined in .c file *********************************************************/
+static char *hotlist_file_name;
 
 /*** declarations of public functions ************************************************************/
 
diff -urNp mc-4.8.27-orig/src/filemanager/Makefile.am mc-4.8.27/src/filemanager/Makefile.am
--- mc-4.8.27-orig/src/filemanager/Makefile.am	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/Makefile.am	2021-12-21 13:46:21.729523330 +0200
@@ -25,7 +25,8 @@ libmcfilemanager_la_SOURCES = \
 	panelize.c panelize.h \
 	panel.c panel.h \
 	tree.c tree.h \
-	treestore.c treestore.h
+	treestore.c treestore.h \
+	selmnt.c selmnt.h
 
 # Unmaintained, unsupported, etc
 #	listmode.c listmode.h
diff -urNp mc-4.8.27-orig/src/filemanager/mountlist.c mc-4.8.27/src/filemanager/mountlist.c
--- mc-4.8.27-orig/src/filemanager/mountlist.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/filemanager/mountlist.c	2021-12-21 13:46:21.729523330 +0200
@@ -316,31 +316,6 @@ me_remote (char const *fs_name, char con
 
 /*** file scope type declarations ****************************************************************/
 
-/* A mount table entry. */
-struct mount_entry
-{
-    char *me_devname;           /* Device node name, including "/dev/". */
-    char *me_mountdir;          /* Mount point directory name. */
-    char *me_mntroot;           /* Directory on filesystem of device used
-                                   as root for the (bind) mount. */
-    char *me_type;              /* "nfs", "4.2", etc. */
-    dev_t me_dev;               /* Device number of me_mountdir. */
-    unsigned int me_dummy:1;    /* Nonzero for dummy file systems. */
-    unsigned int me_remote:1;   /* Nonzero for remote fileystems. */
-    unsigned int me_type_malloced:1;    /* Nonzero if me_type was malloced. */
-};
-
-struct fs_usage
-{
-    uintmax_t fsu_blocksize;    /* Size of a block.  */
-    uintmax_t fsu_blocks;       /* Total blocks. */
-    uintmax_t fsu_bfree;        /* Free blocks available to superuser. */
-    uintmax_t fsu_bavail;       /* Free blocks available to non-superuser. */
-    int fsu_bavail_top_bit_set; /* 1 if fsu_bavail represents a value < 0.  */
-    uintmax_t fsu_files;        /* Total file nodes. */
-    uintmax_t fsu_ffree;        /* Free file nodes. */
-};
-
 /*** file scope variables ************************************************************************/
 
 #ifdef HAVE_INFOMOUNT_LIST
@@ -610,7 +585,7 @@ unescape_tab (char *str)
 /* Return a list of the currently mounted file systems, or NULL on error.
    Add each entry to the tail of the list so that they stay in order. */
 
-static GSList *
+GSList *
 read_file_system_list (void)
 {
     GSList *mount_list = NULL;
@@ -1234,7 +1209,7 @@ read_file_system_list (void)
  ** structure. See my_statfs() below for the "other side" of this hack.
  */
 
-static GSList *
+GSList *
 read_file_system_list (void)
 {
     struct _disk_entry de;
@@ -1334,7 +1309,7 @@ read_file_system_list (void)
    Return 0 if successful, -1 if not.  When returning -1, ensure that
    ERRNO is either a system error value, or zero if DISK is NULL
    on a system that requires a non-NULL value.  */
-static int
+int
 get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp)
 {
 #ifdef STAT_STATVFS             /* POSIX, except pre-2.6.36 glibc/Linux */
diff -urNp mc-4.8.27-orig/src/filemanager/mountlist.h mc-4.8.27/src/filemanager/mountlist.h
--- mc-4.8.27-orig/src/filemanager/mountlist.h	2021-01-10 13:50:16.000000000 +0200
+++ mc-4.8.27/src/filemanager/mountlist.h	2021-12-21 13:46:21.729523330 +0200
@@ -31,6 +31,31 @@ struct my_statfs
     uintmax_t nodes;
 };
 
+/* A mount table entry. */
+struct mount_entry
+{
+    char *me_devname;           /* Device node name, including "/dev/". */
+    char *me_mountdir;          /* Mount point directory name. */
+    char *me_mntroot;           /* Directory on filesystem of device used
+                                   as root for the (bind) mount. */
+    char *me_type;              /* "nfs", "4.2", etc. */
+    dev_t me_dev;               /* Device number of me_mountdir. */
+    unsigned int me_dummy:1;    /* Nonzero for dummy file systems. */
+    unsigned int me_remote:1;   /* Nonzero for remote fileystems. */
+    unsigned int me_type_malloced:1;    /* Nonzero if me_type was malloced. */
+};
+
+struct fs_usage
+{
+    uintmax_t fsu_blocksize;    /* Size of a block.  */
+    uintmax_t fsu_blocks;       /* Total blocks. */
+    uintmax_t fsu_bfree;        /* Free blocks available to superuser. */
+    uintmax_t fsu_bavail;       /* Free blocks available to non-superuser. */
+    int fsu_bavail_top_bit_set; /* 1 if fsu_bavail represents a value < 0.  */
+    uintmax_t fsu_files;        /* Total file nodes. */
+    uintmax_t fsu_ffree;        /* Free file nodes. */
+};
+
 /*** global variables defined in .c file *********************************************************/
 
 /*** declarations of public functions ************************************************************/
@@ -39,6 +64,13 @@ void init_my_statfs (void);
 void my_statfs (struct my_statfs *myfs_stats, const char *path);
 void free_my_statfs (void);
 
+#ifdef HAVE_INFOMOUNT
+int get_fs_usage (char const *file, char const *disk, struct fs_usage *fsp);
+#endif        /* HAVE_INFOMOUNT */
+
+GSList *
+read_file_system_list (void);
+
 /*** inline functions ****************************************************************************/
 
 #endif /* MC__MOUNTLIST_H */
diff -urNp mc-4.8.27-orig/src/filemanager/selmnt.c mc-4.8.27/src/filemanager/selmnt.c
--- mc-4.8.27-orig/src/filemanager/selmnt.c	1970-01-01 03:00:00.000000000 +0300
+++ mc-4.8.27/src/filemanager/selmnt.c	2021-12-21 13:51:35.483495289 +0200
@@ -0,0 +1,393 @@
+#include <config.h>
+#include <sys/stat.h>
+
+#include "lib/global.h"
+#include "lib/fileloc.h"
+#include "lib/tty/color.h"
+#include "lib/util.h"
+#include "mountlist.h"
+#include "panel.h"
+#include "filemanager.h"
+#include "lib/widget/dialog.h"
+#include "lib/mcconfig.h"
+
+#include "lib/widget/wtools.h"
+#include "lib/widget.h"
+#include "lib/search.h"
+
+#include "cmd.h"
+#include "lib/tty/tty.h"
+
+#include "lib/vfs/path.h"
+
+#include "selmnt.h"
+#include "hotlist.h"
+#include "../setup.h"
+
+gboolean mc_cd_mountpoint_and_dir = TRUE;
+gboolean mc_cd_mountpoint_and_dir_align = TRUE;
+
+#define SELMNT_HOTKEY_SYSMBOLS "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
+
+char *selmnt_filter;
+char hotkeys_list[] = SELMNT_HOTKEY_SYSMBOLS;
+
+//------------------ functions
+
+static unsigned char
+get_hotkey (int n)
+{
+    int c = ' ', i, pos = -1;
+
+    switch (n)
+    {
+	case -1:
+	    break;
+	case 0:
+	    for (i = strlen (hotkeys_list); i >= 0; i--)
+		if (hotkeys_list[i] != ' ')
+		    pos = i;
+	    if (pos < strlen (hotkeys_list))
+	    {
+		c = hotkeys_list[pos];
+		hotkeys_list[pos] = ' ';
+	    }
+	    break;
+	default:
+	    for (i = 0; ((i < strlen (hotkeys_list)) && (hotkeys_list[i] != n)); i++);
+	    if (i < strlen (hotkeys_list))
+	    {
+		c = n;
+		hotkeys_list[i] = ' ';
+	    }
+	    else
+		c = get_hotkey(0);
+    }
+
+    return c;
+}
+
+//------------------ show mounts list
+static int show_mnt (Mountp *mntpoints, WPanel *panel)
+{
+    Mountp *mz, *mhi;
+    int menu_lines, i, maxlen=5, count = 0;
+    Listbox* listbox;
+    mz = mntpoints;
+
+    if (!mz)
+	return 0;
+
+    while (mz->prev)           /* goto first */
+	mz = mz->prev;
+
+    mhi = mz;
+
+    while (mhi)
+    {
+	if ((i = ((mhi->mpoint) ? g_utf8_strlen (mhi->mpoint, 255) + ((mhi->mpoint[0] == '~') ? -1 : 1) : 0) +
+		 (mc_cd_mountpoint_and_dir ? 5 : 3) +
+		 ((mhi->path && mc_cd_mountpoint_and_dir) ? g_utf8_strlen(mhi->path, 255) + 1 : -2)) > maxlen)
+	    maxlen = i;
+	if (maxlen > panel->widget.cols-8)
+	    maxlen = panel->widget.cols-8;
+	count++;
+	mhi = mhi->next;
+    }
+
+// count = number of elements
+// maxlen = maximum long of mountpoint menu item name
+
+    menu_lines = count;
+    strcpy(hotkeys_list, SELMNT_HOTKEY_SYSMBOLS);
+
+    /* Create listbox */
+    listbox = create_listbox_window_centered (LINES/2, panel->widget.x + panel->widget.cols/2 - 2,
+					      menu_lines, maxlen, " Mountpoints ", "Mountpoints");
+    i=0;
+
+    while (mz) {
+	static char buffer[256], b1[256], b2[256];
+	static char hotkey;
+//	sprintf( buffer, "%s (%d/%d)", mz->mpoint, mz->total/1024, mz->avail/1024 ); //for example!
+//	sprintf( buffer, "%s", mz->mpoint);
+
+    if ((mz->mpoint[0] == '~') || (g_utf8_strlen(mz->mpoint, 255) == 0))
+	if (g_utf8_strlen(mz->mpoint, 255) > 0)
+	    {
+	    mz->mpoint++[0];
+	    hotkey = get_hotkey(mz->mpoint++[0]);
+	    }
+	else
+	    hotkey = get_hotkey(-1);
+    else
+	hotkey = get_hotkey(0);
+
+    if (mc_cd_mountpoint_and_dir && mz->path)
+	if (mc_cd_mountpoint_and_dir_align)
+	{
+	    g_snprintf( b1, sizeof (b1), "%c %s", hotkey, mz->mpoint);
+	    g_snprintf( b2, sizeof (b2), "%s", mz->path);
+	    if ((int) (maxlen - g_utf8_strlen(b1, 255) - g_utf8_strlen(b2, 255) - 4) < 0)
+		g_snprintf( buffer, sizeof (buffer), "%s [%s]", b1, b2);
+	    else 
+	    {
+		static char spaces[256];
+		memset (spaces, ' ' , maxlen - g_utf8_strlen(b1, 255) - g_utf8_strlen(b2, 255) - 4);
+		spaces[maxlen - g_utf8_strlen(b1, 255) - g_utf8_strlen(b2, 255) - 4] = '\0';
+		g_snprintf( buffer, sizeof (buffer), "%s%s[%s]", b1, spaces, b2);
+	    }
+	} 
+	else 
+	    g_snprintf( buffer, sizeof (buffer), "%c %s [%s]", hotkey, mz->mpoint, mz->path);
+    else
+	if (g_utf8_strlen(mz->mpoint, 255) != 0)
+	    g_snprintf( buffer, sizeof (buffer), "%c %s", hotkey, mz->mpoint);
+	else
+	{
+	    memset (buffer, '-', maxlen - 2);
+	    buffer[maxlen-2] = '\0';
+
+	    if (mz->name && selmnt_separators_name_show)
+	    {
+		int start_pos;
+
+		g_snprintf(b2, sizeof (b2), " %s ", mz->name);
+		if ( ((g_utf8_strlen(buffer, 255)) - (g_utf8_strlen(mz->name, 255)) ) < 8)
+		    b2[g_utf8_strlen(buffer, 255) - 8] = 0;
+
+		g_snprintf(b1, sizeof (b1), " %s ", b2);
+
+		if ((start_pos = (g_utf8_strlen(buffer, 255) - g_utf8_strlen(b1, 255)) / 2) < 0)
+		    start_pos = 0;
+
+		for (int i = start_pos; ((i - start_pos) < g_utf8_strlen(b1, 255) && (i < g_utf8_strlen(buffer, 255))); i++)
+		    buffer[i] = b1[i - start_pos];
+	    }
+	}
+
+	LISTBOX_APPEND_TEXT( listbox, hotkey, buffer, NULL, NULL );
+
+	mz = mz->next;
+	i++;
+    }
+
+    /* Select the default entry */
+    listbox_select_entry( listbox->list, 0 );
+
+    i = run_listbox( listbox );
+
+// we must return dirnum
+    return (i);
+
+}
+
+//------------------ init Mountp
+// First - we need helper, that must identify our last dir in this mountpoint
+// from dir_history
+
+static gpointer path_from_history (WPanel *panel, char *mountpoint)
+{
+    GList *hd;
+
+    hd = panel->dir_history.list;
+
+    if ( !hd ) 
+	return NULL;
+
+    if ( ! strcmp (mountpoint,PATH_SEP_STR) ) 
+	return NULL;
+
+    while (hd->next)
+	hd = hd->next;
+
+    do {
+	struct stat sb;
+	if (strcmp(mountpoint, strdup(hd->data)))
+	    if (!strncmp(mountpoint, strdup(hd->data), strlen(mountpoint)) &&
+		!stat(hd->data, &sb))
+		return hd->data;
+
+	hd = hd->prev;
+    }  while (hd->prev);
+
+    return NULL;
+}
+
+Mountp *add_to_mountp_list ( Mountp *mounts )
+{
+    if (!mounts)
+    {
+	mounts = malloc (sizeof (Mountp)+1);
+	memset (mounts, 0, sizeof (Mountp));
+    }
+    else
+    {
+	mounts->next = malloc (sizeof (Mountp)+1);
+	memset (mounts->next, 0, sizeof (Mountp));
+
+	mounts->next->prev = mounts;
+	mounts = mounts->next;
+    }
+
+    return mounts;
+}
+
+Mountp *init_mountp ( WPanel *panel )
+{
+    Mountp *mounts = NULL;
+    GSList *temp = NULL;
+    struct fs_usage fs_use;
+    FILE *file = NULL;
+
+    selmnt_filter = load_selmnt_filter ();
+
+    temp = read_file_system_list ();
+
+    while (temp)
+    {
+	if (mc_search(selmnt_filter, NULL, ((struct mount_entry *) (temp->data))->me_mountdir, MC_SEARCH_T_REGEX))
+	{
+	    temp = temp->next;
+	    continue;
+	}
+
+	mounts = add_to_mountp_list (mounts);
+
+	get_fs_usage (((struct mount_entry *) (temp->data))->me_mountdir, NULL, &fs_use);
+
+	mounts->mpoint = strdup (((struct mount_entry *) (temp->data))->me_mountdir);
+	mounts->path = mc_cd_mountpoint_and_dir ? path_from_history (panel, ((struct mount_entry *) (temp->data))->me_mountdir) : NULL;
+	mounts->name = strdup (((struct mount_entry *) (temp->data))->me_devname);
+	mounts->avail = getuid () ? fs_use.fsu_bavail/2 : fs_use.fsu_bfree/2;
+	mounts->total = fs_use.fsu_blocks/2;
+
+	temp = temp->next;
+    }
+    free (temp);
+
+    if (selmnt_with_hotlist)
+    {
+	if (hotlist_file_name == NULL)
+	    hotlist_file_name = mc_config_get_full_path (MC_HOTLIST_FILE);
+
+	if (file = fopen(hotlist_file_name, "r"))
+	{
+	    char *line = NULL;
+	    static char symbols[256], path[256], mpoint[256];
+	    size_t linecap = 0;
+	    ssize_t linelen;
+	    int hotlist_items = 0;
+
+	    while ((linelen = getline(&line, &linecap, file)) > 0)
+		if ((strstr(line, "ENTRY")) && !(strstr(line, " ENTRY")) && (strstr(line, "URL")))
+		{
+		    if (hotlist_items == 0)
+		    {
+			if (mounts)
+			{
+			    mounts = add_to_mountp_list (mounts);
+
+			    mounts->mpoint = "";
+			    mounts->name = "Hotlist";
+			    mounts->path = NULL;
+			    mounts->avail = 0;
+			    mounts->total = 0;
+			}
+
+			hotlist_items++;
+		    }
+
+		    sscanf(line, "%[^\"]\"%[^\"]\"%[^\"]\"%[^\"]\"", symbols, mpoint, symbols, path);
+
+		    mounts = add_to_mountp_list (mounts);
+
+		    mounts->mpoint = strdup (mpoint);
+		    mounts->name = NULL;
+		    mounts->path = strdup (path);
+		    mounts->avail = 0;
+		    mounts->total = 0;
+
+		}
+	    free(line);
+	    fclose(file);
+	}
+    }
+
+    return mounts; /* must be freed! */
+}
+
+
+static int select_mountpoint( WPanel *panel )
+{
+    int i, inta;
+    char *s = NULL;
+    Mountp *mount_ls = init_mountp(panel);
+
+/* HERE we WILL add some special functions, like fast ftp or network client call */
+
+/*
+Network link - netlink_cmd
+FTP link - ftplink_cmd
+*/
+
+/* HERE we FINISH add some special functions */
+
+    if (mount_ls)
+    {
+	if (selmnt_always_show || (mount_ls->prev || mount_ls->next))
+	{
+	    inta = show_mnt (mount_ls, panel);
+
+	    if (inta != -1)
+	    {
+		while (mount_ls->prev)           /* goto first */
+		    mount_ls = mount_ls->prev;
+
+		for (i=0; i<inta; i++)
+		    if (mount_ls->next)
+			mount_ls = mount_ls->next;
+// resulting dirname
+		if ((mc_cd_mountpoint_and_dir && mount_ls->path) ||
+			(mount_ls->mpoint[0] != '/'))
+		{
+		    s = mount_ls->path;
+		}
+		else
+		{
+		    if (mount_ls->mpoint)
+			s = mount_ls->mpoint;
+		}
+	    }
+
+	    if (s) /* execute CD */
+	    {
+		int r;
+		vfs_path_t *cd_vpath;
+
+		cd_vpath = vfs_path_from_str_flags (s, VPF_NO_CANON);
+		r = panel_do_cd (panel, cd_vpath, cd_exact);
+		vfs_path_free (cd_vpath, TRUE);
+	    }
+	    else /* execute command */ 
+	    {
+	    }
+	}
+    }
+    free (mount_ls);
+    return 1;
+}
+
+//------------------ programming interfaces
+void select_mnt_left ( void )
+{
+    switch_to_listing ( 0 );
+    select_mountpoint ( left_panel );
+}
+
+
+void select_mnt_right ( void )
+{
+    switch_to_listing ( 1 );
+    select_mountpoint ( right_panel );
+}
diff -urNp mc-4.8.27-orig/src/filemanager/selmnt.h mc-4.8.27/src/filemanager/selmnt.h
--- mc-4.8.27-orig/src/filemanager/selmnt.h	1970-01-01 03:00:00.000000000 +0300
+++ mc-4.8.27/src/filemanager/selmnt.h	2021-12-21 13:47:14.261849053 +0200
@@ -0,0 +1,25 @@
+#ifndef __SELMNT_H__
+#define __SELMNT_H__
+
+extern int mc_cd_mountpoint_and_dir;
+extern char *selmnt_filter;
+
+typedef struct mountp_list { 
+    int special;
+    char *handler;
+
+    struct mountp_list *prev;
+    struct mountp_list *next;
+
+    char *name; // name of entry device, [/dev/]'hda8'
+    char *path; // local path after mountpoint dir, [/mnt/hda/8]'/mp3' (plan to get last from history by regexp)
+    char *mpoint; // mountpoint, '/mnt/hda/8'
+    int total; // total size of FS
+    int avail;  // free size of FS
+} Mountp;
+
+Mountp *init_mountp ( WPanel *panel );
+void select_mnt_left ( void );
+void select_mnt_right ( void );
+
+#endif /* __SELMNT_H__ */
diff -urNp mc-4.8.27-orig/src/keymap.c mc-4.8.27/src/keymap.c
--- mc-4.8.27-orig/src/keymap.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/keymap.c	2021-12-21 13:46:21.730523317 +0200
@@ -188,6 +188,8 @@ static const global_keymap_ini_t default
     {"CycleListingFormat", "alt-t"},
     {"PanelOtherCd", "alt-o"},
     {"PanelOtherCdLink", "alt-l"},
+    {"SelectMntLeft", "f11"},
+    {"SelectMntRight", "f12"},    
     {"CopySingle", "f15"},
     {"DeleteSingle", "f18"},
     {"Enter", "enter"},
diff -urNp mc-4.8.27-orig/src/setup.c mc-4.8.27/src/setup.c
--- mc-4.8.27-orig/src/setup.c	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/setup.c	2021-12-21 13:46:21.730523317 +0200
@@ -59,6 +59,7 @@
 #include "filemanager/panelize.h"       /* load/save/done panelize */
 #include "filemanager/layout.h"
 #include "filemanager/cmd.h"
+#include "filemanager/selmnt.h"
 
 #include "args.h"
 #include "execute.h"            /* pause_after_run */
@@ -214,6 +215,10 @@ struct macro_action_t record_macro_buf[M
 GArray *macros_list;
 #endif /* USE_INTERNAL_EDIT */
 
+gboolean selmnt_with_hotlist = FALSE;
+gboolean selmnt_always_show = FALSE;
+gboolean selmnt_separators_name_show = TRUE;
+
 /*** file scope macro definitions ****************************************************************/
 
 /* In order to use everywhere the same setup for the locale we use defines */
@@ -364,6 +369,9 @@ static const struct
     { "mcview_remember_file_position", &mcview_remember_file_position },
     { "auto_fill_mkdir_name", &auto_fill_mkdir_name },
     { "copymove_persistent_attr", &copymove_persistent_attr },
+    { "selmnt_with_hotlist", &selmnt_with_hotlist },
+    { "selmnt_always_show", &selmnt_always_show },
+    { "selmnt_separators_name_show", &selmnt_separators_name_show },
     { NULL, NULL }
 };
 
@@ -892,6 +900,7 @@ load_setup (void)
     load_layout ();
     panels_load_options ();
     load_panelize ();
+    load_selmnt_filter ();
 
     /* Load time formats */
     user_recent_timeformat =
@@ -1018,6 +1027,9 @@ save_setup (gboolean save_options, gbool
         mc_config_set_string (mc_global.main_config, CONFIG_MISC_SECTION, "clipboard_paste",
                               clipboard_paste_path);
 
+        mc_config_set_string (mc_global.main_config, CONFIG_MISC_SECTION, "selmnt_filter",
+                              selmnt_filter);
+
         tmp_profile = mc_config_get_full_path (MC_CONFIG_FILE);
         ret = mc_config_save_to_file (mc_global.main_config, tmp_profile, NULL);
         g_free (tmp_profile);
@@ -1124,6 +1136,23 @@ load_anon_passwd (void)
 
 /* --------------------------------------------------------------------------------------------- */
 
+char *
+load_selmnt_filter (void)
+{
+    char *buffer;
+
+    buffer =
+        mc_config_get_string (mc_global.main_config, CONFIG_MISC_SECTION, "selmnt_filter", "^()$");
+
+    if ((buffer != NULL) && (buffer[0] != '\0'))
+        return buffer;
+
+    g_free (buffer);
+    return NULL;
+}
+
+/* --------------------------------------------------------------------------------------------- */
+
 void
 panel_load_setup (WPanel * panel, const char *section)
 {
diff -urNp mc-4.8.27-orig/src/setup.h mc-4.8.27/src/setup.h
--- mc-4.8.27-orig/src/setup.h	2021-08-01 19:45:58.000000000 +0300
+++ mc-4.8.27/src/setup.h	2021-12-21 13:46:21.730523317 +0200
@@ -153,6 +153,11 @@ void load_key_defs (void);
 char *load_anon_passwd (void);
 #endif /* ENABLE_VFS_FTP */
 
+char *load_selmnt_filter (void);
+extern gboolean selmnt_with_hotlist;
+extern gboolean selmnt_always_show;
+extern gboolean selmnt_separators_name_show;
+
 void panel_load_setup (WPanel * panel, const char *section);
 void panel_save_setup (WPanel * panel, const char *section);
 
